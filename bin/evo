#!/bin/sh

# OPTIONS:
#   -f: start in the foreground
#   -p <filename>: log the pid to a file (useful to kill it later)

# CONTROLLING STARTUP:
#
# This script relies on few environment variables to determine startup
# behavior, those variables are:
#
#   EVO_CLASSPATH -- A Java classpath containing everything necessary to run.
#   JAVA_OPTS    -- Additional arguments to the JVM for heap size, etc
#   EVO_JAVA_OPTS -- External Java Opts on top of the defaults set
#
#
# Optionally, exact memory values can be set using the following values, note,
# they can still be set using the `EVO_JAVA_OPTS`. Sample format include "512m", and "10g".
#
#   EVO_HEAP_SIZE -- Sets both the minimum and maximum memory to allocate (recommended)
#

CDPATH=""
SCRIPT="$0"

# SCRIPT may be an arbitrarily deep series of symlinks. Loop until we have the concrete path.
while [ -h "$SCRIPT" ] ; do
  ls=`ls -ld "$SCRIPT"`
  # Drop everything prior to ->
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=`dirname "$SCRIPT"`/"$link"
  fi
done

# determine evo home
EVO_HOME=`dirname "$SCRIPT"`/..

# make EVO_HOME absolute
EVO_HOME=`cd "$EVO_HOME"; pwd`


EVO_CLASSPATH=$EVO_CLASSPATH:$EVO_HOME/etc:$EVO_HOME/etc/security:$EVO_HOME/lib/${project.build.finalName}.jar:$EVO_HOME/lib/*:$EVO_HOME/lib/sigar/*

if [ "x$EVO_MIN_MEM" = "x" ]; then
    EVO_MIN_MEM=256m
fi
if [ "x$EVO_MAX_MEM" = "x" ]; then
    EVO_MAX_MEM=1g
fi
if [ "x$EVO_HEAP_SIZE" != "x" ]; then
    EVO_MIN_MEM=$EVO_HEAP_SIZE
    EVO_MAX_MEM=$EVO_HEAP_SIZE
fi

# min and max heap sizes should be set to the same value to avoid
# stop-the-world GC pauses during resize, and so that we can lock the
# heap in memory on startup to prevent any of it from being swapped
# out.
JAVA_OPTS="$JAVA_OPTS -Xms${EVO_MIN_MEM}"
JAVA_OPTS="$JAVA_OPTS -Xmx${EVO_MAX_MEM}"

# new generation
if [ "x$EVO_HEAP_NEWSIZE" != "x" ]; then
    JAVA_OPTS="$JAVA_OPTS -Xmn${EVO_HEAP_NEWSIZE}"
fi

# max direct memory
if [ "x$EVO_DIRECT_SIZE" != "x" ]; then
    JAVA_OPTS="$JAVA_OPTS -XX:MaxDirectMemorySize=${EVO_DIRECT_SIZE}"
fi

# reduce the per-thread stack size
JAVA_OPTS="$JAVA_OPTS -Xss256k"

# set to headless, just in case
JAVA_OPTS="$JAVA_OPTS -Djava.awt.headless=true"

# Force the JVM to use IPv4 stack
# JAVA_OPTS="$JAVA_OPTS -Djava.net.preferIPv4Stack=true"

JAVA_OPTS="$JAVA_OPTS -XX:+UseParNewGC"
JAVA_OPTS="$JAVA_OPTS -XX:+UseConcMarkSweepGC"

JAVA_OPTS="$JAVA_OPTS -XX:CMSInitiatingOccupancyFraction=75"
JAVA_OPTS="$JAVA_OPTS -XX:+UseCMSInitiatingOccupancyOnly"

# When running under Java 7
JAVA_OPTS="$JAVA_OPTS -XX:+UseCondCardMark"

# GC logging options -- uncomment to enable
# JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCDetails"
# JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCTimeStamps"
# JAVA_OPTS="$JAVA_OPTS -XX:+PrintClassHistogram"
# JAVA_OPTS="$JAVA_OPTS -XX:+PrintTenuringDistribution"
# JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCApplicationStoppedTime"
# JAVA_OPTS="$JAVA_OPTS -Xloggc:/var/log/evo/gc.log"

# Causes the JVM to dump its heap on OutOfMemory.
JAVA_OPTS="$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError"
# The path to the heap dump location, note directory must exists and have enough
# space for a full heap dump.
#JAVA_OPTS="$JAVA_OPTS -XX:HeapDumpPath=$EVO_HOME/logs/heapdump.hprof"

JAVA_OPTS="$JAVA_OPTS -Xbootclasspath/p:$EVO_HOME/lib/boot/npn-boot-1.1.1.v20121030.jar"

if [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA=$JAVA_HOME/bin/java
else
    JAVA=`which java`
fi

if [ -z "$EVO_CLASSPATH" ]; then
    echo "You must set the EVO_CLASSPATH var" >&2
    exit 1
fi

# Special-case path variables.
case `uname` in
    CYGWIN*)
        EVO_CLASSPATH=`cygpath -p -w "$EVO_CLASSPATH"`
        EVO_HOME=`cygpath -p -w "$EVO_HOME"`
    ;;
esac

launch_service()
{
    pidpath=$1
    foreground=$2
    props=$3

    if [ "x$foreground" != "x" ]; then
        exec "$JAVA" $JAVA_OPTS $EVO_JAVA_OPTS -Dc9.home="$EVO_HOME" -cp "$EVO_CLASSPATH" $props \
                co.fs.evo.Evo
        execval=$?
    else
        # Startup in background and write the pid.
        exec "$JAVA" $JAVA_OPTS $EVO_JAVA_OPTS -Dc9.home="$EVO_HOME" -cp "$EVO_CLASSPATH" $props \
                    co.fs.evo.Evo <&- >&- &
        execval=$?
        [ ! -z "$pidpath" ] && printf '%d' $! > "$pidpath"
    fi

    return $execval
}

stop_service()
{
    pidpath=$1

    if [ ! -z "$pidpath" -a -f $pidpath ]; then
        pid=`cat $pidpath`
        echo "Stopping evo with pid $pid"
        kill $pid
        retval=$?

        if [ $retval -eq 0 ]; then
            rm $pidpath
        fi
    else
        retval=1
    fi

    return $retval
}

# Parse any command line options.
args=`getopt sfhp:D:X: "$@"`
eval set -- "$args"

pidfile="$EVO_HOME/evo.pid"

while true; do
    case $1 in
        -p)
            pidfile="$2"
            shift 2
        ;;
        -f)
            foreground="yes"
            shift
        ;;
        -s)
            stop="yes"
            shift
        ;;
        -h)
            echo "Usage: $0 [-f] [-h] [-p pidfile] [-s]"
            exit 0
        ;;
        -D)
            properties="$properties -D$2"
            shift 2
        ;;
        -X)
            properties="$properties -X$2"
            shift 2
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Error parsing arguments!" >&2
            exit 1
        ;;
    esac
done

if [ "x$stop" != "x" ]; then
    # Stop evo
    stop_service "$pidfile"
else
    # Start up the service
    launch_service "$pidfile" "$foreground" "$properties"
fi

exit $?
