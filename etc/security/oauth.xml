<?xml version="1.0" encoding="UTF-8"?>

<!-- OAuth 2.0 configuration -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/security/oauth2 
        http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd 
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <beans:bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="evo" />
    </beans:bean>
    
    <beans:bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
    
    <beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <beans:bean class="org.springframework.security.access.vote.RoleVoter" />
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
    
    <beans:bean id="userApprovalHandler" class="co.fs.evo.security.OAuthApprovalHandler">
        <beans:property name="autoApproveClients">
            <beans:set>
                <beans:value>my-less-trusted-autoapprove-client</beans:value>
            </beans:set>
        </beans:property>
        <beans:property name="tokenServices" ref="tokenServices" />
    </beans:bean>
    
    <oauth:resource-server id="resourceServerFilter" resource-id="evo" token-services-ref="tokenServices" />
    
    <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />
    
    <!-- Responsible for creating actual tokens -->
    <beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore" />
        <beans:property name="supportRefreshToken" value="true" />
        <beans:property name="clientDetailsService" ref="clientDetails" />
    </beans:bean>
    
    <!-- oauth client/s -->
    <oauth:client-details-service id="clientDetails">
        <oauth:client 
            client-id="admin" 
            authorized-grant-types="client_credentials,password,refresh_token"
            authorities="ROLE_CLIENT" 
            scope="read,write" 
            secret="123" />
        <oauth:client 
            client-id="user1" 
            authorized-grant-types="client_credentials,password,refresh_token"
            authorities="ROLE_USER" 
            scope="read" 
            secret="123" />
        <oauth:client 
            client-id="user2" 
            authorized-grant-types="client_credentials,password,refresh_token"
            authorities="ROLE_USER" 
            scope="read,write" 
            secret="456" />
    </oauth:client-details-service>
    
    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="authenticationManager">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <http-basic />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>
    
    <http pattern="/v1/**" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint" use-expressions="true">
        <anonymous enabled="false" />
        <!--intercept-url pattern="/v1/**" access="hasRole('supervisor')" /-->
        <intercept-url pattern="/v1/**" access="(#oauth2.clientHasRole('ROLE_CLIENT') or #oauth2.clientHasRole('ROLE_USER')) and #oauth2.hasScope('write')" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
    </http>
    
    <global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <expression-handler ref="oauthExpressionHandler" />
    </global-method-security>
    
    <oauth:expression-handler id="oauthExpressionHandler" />
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />
    
</beans:beans> 